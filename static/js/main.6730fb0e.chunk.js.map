{"version":3,"sources":["Components/Search.js","Components/Table.js","Components/Form/index.js","Components/Form/requests.js","Components/UserTable.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Search","searchText","setSearchText","className","id","type","placeholder","value","onChange","e","target","Table","contactList","deleteContact","addFromTable","sortBy","startEditingContact","useState","filteredContacts","setFilteredContacts","useEffect","searchTextLowerCased","toLowerCase","contacts","filter","contact","first_name","indexOf","scope","onClick","map","key","last_name","email","aria-hidden","isInUserList","ContactForm","props","isNewContact","state","handleChange","event","isValid","setState","name","handleSubmit","contactObj","onSuccess","onError","preventDefault","responseObject","addNewContact","alert","fetch","method","body","JSON","stringify","headers","then","res","json","console","log","catch","error","editContactInServer","updateContact","gender","this","isDisabled","Object","values","includes","onSubmit","htmlFor","length","required","autoComplete","disabled","React","Component","UserTable","removeContactFromUserList","person","App","setContacts","myContacts","setMyContacts","idOfContactBeingEdited","setIdOfContactBeingEdited","axios","get","response","data","forEach","newContactList","sort","a","b","localeCompare","contactIndex","findIndex","newContactData","updatedContacts","splice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAuBeA,G,YArBA,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cAC5B,OACE,yBAAKC,UAAU,oBACb,yBAAKC,GAAG,QACN,0BAAMA,GAAG,cAAcD,UAAU,OAC/B,2BACEE,KAAK,OACLC,YAAY,SAEZC,MAAON,EACPO,SAAU,SAAAC,GAAC,OAAIP,EAAcO,EAAEC,OAAOH,UAExC,4BAAQF,KAAK,SAASF,UAAU,kBAAkBC,GAAG,UACnD,uBAAGD,UAAU,uBCoEVQ,EAjFD,SAAC,GAOR,IANLC,EAMI,EANJA,YACAX,EAKI,EALJA,WACAY,EAII,EAJJA,cACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,OACAC,EACI,EADJA,oBACI,EAC4CC,mBAAS,IADrD,mBACGC,EADH,KACqBC,EADrB,KAeJ,OAZAC,oBAAU,WACR,IAAMC,EAAuBpB,EAAWqB,cAGlCC,EAAWX,EAAYY,OAAO,SAAAC,GAElC,MADa,UAAGA,EAAQC,WAAX,KAAyBJ,cAC1BK,QAAQN,IAAyB,IAG/CF,EAAoBI,IACnB,CAACX,EAAaX,IAGf,yBAAKE,UAAU,yBACb,2BAAOA,UAAU,SACf,2BAAOA,UAAU,YACf,4BACE,wBAAIyB,MAAM,OACR,4BAAQC,QAAS,kBAAMd,EAAO,gBAA9B,SAEF,wBAAIa,MAAM,OACR,4BAAQC,QAAS,kBAAMd,EAAO,eAA9B,cAEF,wBAAIa,MAAM,OACR,4BAAQC,QAAS,kBAAMd,EAAO,WAA9B,UAEF,wBAAIa,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,cACA,wBAAIA,MAAM,OAAV,UAGJ,+BACGV,EAAiBY,IAAI,SAAAL,GAAO,OAC3B,wBAAIM,IAAKN,EAAQrB,IACf,4BAAKqB,EAAQC,YACb,4BAAKD,EAAQO,WACb,4BAAKP,EAAQQ,OACb,4BACE,uBACE9B,UAAU,qBACV+B,cAAY,OACZL,QAAS,kBAAMhB,EAAcY,EAAQrB,QAGzC,6BACIqB,EAAQU,cACR,uBACEhC,UAAU,yBACV+B,cAAY,OACZL,QAAS,kBAAMf,EAAaW,EAAQrB,OAIvCqB,EAAQU,cAAgB,UAG3B,4BACE,uBACEhC,UAAU,6BACV+B,cAAY,OACZL,QAAS,kBAAMb,EAAoBS,EAAQrB,e,+lBCrExCgC,E,YACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAoBRC,aAAe,WAEb,OAAwB,MAAjB,EAAKC,MAAMnC,IAvBD,EA0BnBoC,aAAe,SAACC,EAAOC,GACrB,EAAKC,SAAS,CACZlB,QAAQ,EAAD,GACF,EAAKc,MAAMd,QADT,eAEJgB,EAAM/B,OAAOkC,KAAOH,EAAM/B,OAAOH,QAEpCmC,QAAQ,EAAD,GAAO,EAAKH,MAAMG,QAAlB,eAA4BD,EAAM/B,OAAOkC,KAAOF,OAhCxC,EAqCnBG,aAAe,SAAAJ,GCxCV,IAA4BK,EAAYC,EAAWC,EDyCtDP,EAAMQ,iBACF,EAAKX,gBC1CsBQ,ED4C3B,EAAKP,MAAMd,QC5C4BsB,ED6CvC,SAAAG,GACE,EAAKb,MAAMc,cAAcD,IC9CuBF,EDgDlD,WACEI,MAAM,0BChDdC,MACE,yEACA,CACEP,aACAQ,OAAQ,OACRC,KAAMC,KAAKC,UAAUX,GACrBY,QAAS,CACP,eAAgB,sBAInBC,KAAK,SAACC,GAAD,OAASA,EAAIC,SAClBF,KAAK,SAACC,GACLb,EAAUa,GACVE,QAAQC,IAAI,gCAAiCH,KAE9CI,MAAM,SAACC,GACNjB,IACAc,QAAQG,MAAM,uCAAwCA,ODkCtDH,QAAQC,IAAI,EAAKxB,MAAMnC,GAAI,8BC7B1B,SAA6B0C,EAAYC,EAAWC,GACzDK,MACE,yEACA,CACEP,aACAQ,OAAQ,OACRC,KAAMC,KAAKC,UAAUX,GACrBY,QAAS,CACP,eAAgB,sBAInBC,KAAK,SAACC,GAAD,OAASA,EAAIC,SAClBF,KAAK,SAACC,GACLb,EAAUD,GACVgB,QAAQC,IAAI,kCAAmCjB,KAEhDkB,MAAM,SAACC,GACNjB,IACAc,QAAQG,MAAM,sCAAuCA,KDWrDC,CAEE,EAAK3B,MAAMd,QACX,WACE,EAAKY,MAAM8B,cAAX,GACE/D,GAAI,EAAKmC,MAAMnC,IACZ,EAAKmC,MAAMd,WAIlB,WACE2B,MAAM,6BA3DZ,EAAKb,MAAQ,CACXnC,GAAIiC,EAAMZ,QAAUY,EAAMZ,QAAQrB,GAAK,KACvCqB,QAAS,CACPC,WAAYW,EAAMZ,QAAUY,EAAMZ,QAAQC,WAAa,GACvDM,UAAWK,EAAMZ,QAAUY,EAAMZ,QAAQO,UAAY,GACrDC,MAAOI,EAAMZ,QAAUY,EAAMZ,QAAQQ,MAAQ,GAC7CmC,OAAQ/B,EAAMZ,QAAUY,EAAMZ,QAAQ2C,OAAS,IAGjD1B,QAAS,CACPhB,aAAYW,EAAMZ,QAClBO,YAAWK,EAAMZ,QACjBQ,QAAOI,EAAMZ,QACb2C,SAAQ/B,EAAMZ,UAhBD,E,sEAqET,IAAD,OACDA,EAAU4C,KAAK9B,MAAMd,QAGrB6C,EAAaC,OAAOC,OAAOH,KAAK9B,MAAMG,SAAS+B,UAAS,GAE9D,OACE,6BACE,0BAAMC,SAAU,SAAAjE,GAAC,OAAI,EAAKoC,aAAapC,IAAIN,UAAU,gBACnD,yBAAKA,UAAU,kBACb,wBAAIA,UAAU,eACXkE,KAAK/B,eAAiB,UAAY,gBADrC,YAGA,2BAAOqC,QAAQ,aAAaxE,UAAU,aAAtC,gBAGA,2BACEK,SAAU,SAAAC,GAAC,OACT,EAAK+B,aACH/B,EACAA,EAAEC,OAAOH,MAAMqE,QAAU,GAAKnE,EAAEC,OAAOH,MAAMqE,QAAU,KAG3DvE,KAAK,OACLuC,KAAK,aACLrC,MAAOkB,EAAQC,WACfvB,UAAU,oBACVC,GAAG,aACHE,YAAY,aACZuE,UAAQ,EACRC,aAAa,SAEf,2BAAOH,QAAQ,YAAYxE,UAAU,aAArC,aAGA,2BACEK,SAAU,SAAAC,GAAC,OACT,EAAK+B,aACH/B,EACAA,EAAEC,OAAOH,MAAMqE,QAAU,GAAKnE,EAAEC,OAAOH,MAAMqE,QAAU,KAG3DvE,KAAK,OACLuC,KAAK,YACLrC,MAAOkB,EAAQO,UACf7B,UAAU,oBACVC,GAAG,YACHE,YAAY,YACZwE,aAAa,SAEf,2BAAOH,QAAQ,QAAQxE,UAAU,aAAjC,SAGA,2BACEK,SAAU,SAAAC,GAAC,OACT,EAAK+B,aACH/B,EACAA,EAAEC,OAAOH,MAAMqE,QAAU,GAAKnE,EAAEC,OAAOH,MAAMkE,SAAS,OAG1DpE,KAAK,QACLuC,KAAK,QACLrC,MAAOkB,EAAQQ,MACf9B,UAAU,oBACVC,GAAG,QACHE,YAAY,QACZuE,UAAQ,IAGV,2BAAOF,QAAQ,SAASxE,UAAU,aAAlC,UAGA,4BACEA,UAAU,eACVC,GAAG,SACHE,YAAY,SACZsC,KAAK,SACLrC,MAAOkB,EAAQ2C,OACfS,UAAQ,EACRrE,SAAU,SAAAC,GAAC,OAET,EAAK+B,aACH/B,EACA,CAAC,OAAQ,SAAU,SAASgE,SAAShE,EAAEC,OAAOH,UAIlD,yCACA,wCACA,2CAEF,yBAAKJ,UAAU,QACb,4BACEA,UAAU,4BACVC,GAAG,SACHC,KAAK,SACL0E,SAAUT,GAJZ,wB,GAlK2BU,IAAMC,WE6ChCC,EA9CG,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,0BAA2BpE,EAAuB,EAAvBA,OAAQQ,EAAe,EAAfA,SACtD,OACE,yBAAKpB,UAAU,OACb,yBAAKA,UAAU,0BACb,wBAAIA,UAAU,eAAd,mBACA,2BAAOA,UAAU,oBACf,2BAAOA,UAAU,YACf,4BACE,wBAAIyB,MAAM,OACR,4BAAQC,QAAS,kBAAMd,EAAO,aAAcQ,KAA5C,SAIF,wBAAIK,MAAM,OACR,4BAAQC,QAAS,kBAAMd,EAAO,YAAaQ,KAA3C,cAIF,wBAAIK,MAAM,OACR,4BAAQC,QAAS,kBAAMd,EAAO,QAASQ,KAAvC,UAEF,wBAAIK,MAAM,OAAV,YAGJ,+BACGL,EAASO,IAAI,SAAAsD,GAAM,OAClB,wBAAIrD,IAAKqD,EAAOhF,IACd,4BAAKgF,EAAO1D,YACZ,4BAAK0D,EAAOpD,WACZ,4BAAKoD,EAAOnD,OACZ,4BACE,uBACE9B,UAAU,qBACV+B,cAAY,OACZL,QAAS,kBAAMsD,EAA0BC,EAAOhF,gB,4NC3BpE,IAuHeiF,EAvHH,WAAO,IA+BOjF,EA/BR,EACgBa,mBAAS,IADzB,mBACTM,EADS,KACC+D,EADD,OAEoBrE,mBAAS,IAF7B,mBAETsE,EAFS,KAEGC,EAFH,OAGoBvE,mBAAS,IAH7B,mBAGThB,EAHS,KAGGC,EAHH,OAK4Ce,mBAAS,MALrD,mBAKTwE,EALS,KAKeC,EALf,KA0EhB,OAZAtE,oBAAU,WACRuE,IACGC,IACC,0EAEDjC,KAAK,SAACkC,GAEL,OADAA,EAASC,KAAKC,QAAQ,SAACtE,GAAD,OAAcA,EAAQU,cAAe,IACpD0D,EAASC,OAEjBnC,KAAK,SAACmC,GAAD,OAAUR,EAAYQ,MAC7B,IAGD,yBAAK3F,UAAU,OACb,6BACE,4BAAQA,UAAU,cAChB,6CAGF,kBAAC,EAAD,CAAQF,WAAYA,EAAYC,cAAeA,IAE/C,8BACE,6BAASC,UAAU,SACjB,kBAAC,EAAD,CACES,YAAaW,EACbtB,WAAYA,EACZY,cAjFU,SAACT,GACrB,IAAM4F,EAAiBzE,EAASC,OAAO,SAACC,GAAD,OAAaA,EAAQrB,KAAOA,IACnEkF,EAAYU,IAgFFhF,oBAAqB0E,EACrB3E,OA9EG,SAACgB,GACd,IAAMnB,EAAW,YAAOW,GACxBX,EAAYqF,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEnE,GAAKqE,cAAcD,EAAEpE,MAClDuD,EAAY1E,IA4EFE,aAnES,SAACV,GACpB,IAAMiG,EAAe9E,EAAS+E,UAAU,SAAC7E,GAAD,OAAaA,EAAQrB,KAAOA,IACpE0D,QAAQC,IAAI,eAAgBsC,GAC5B9E,EAAS8E,GAAclE,cAAe,EACtCqD,EAAc,GAAD,mBAAKD,GAAL,CAAiBhE,EAAS8E,UAmEjC,+BACGZ,GACC,kBAAC,EAAD,CACEhE,SAnEUrB,EAmEcqF,GAlE5BlE,EAASC,OAAO,SAACC,GAAD,OAAaA,EAAQrB,KAAOA,KAAO,IAAI,IAmEnD+D,cAhEQ,SAACoC,GACrB,IAAMF,EAAe9E,EAAS+E,UAC5B,SAAC7E,GAAD,OAAaA,EAAQrB,KAAOmG,EAAenG,KAE7C0D,QAAQC,IAAI,WAAYwC,GACxB,IAAIC,EAAe,YAAOjF,GAC1BiF,EAAgBH,G,qVAAhB,IACKG,EAAgBH,GADrB,GAEKE,GAELjB,EAAYkB,GACZd,EAA0B,UAyDhBD,GACA,kBAAC,EAAD,CAAatC,cAvDH,SAACoD,GACrB,IAAMP,EAAc,sBAAOzE,GAAP,CAAiBgF,IACrCjB,EAAYU,GACZN,EAA0B,SAuDlB,kBAAC,EAAD,CACEnE,SAAUgE,EACVJ,0BAtDsB,SAAC/E,GACjC,IAAMiG,EAAed,EAAWe,UAAU,SAAC7E,GAAD,OAAaA,EAAQrB,KAAOA,IACtEmF,EAAWkB,OAAOJ,EAAc,GAChCb,EAAc,YAAID,KAoDRxE,OA5Fa,SAACgB,GACxB,IAAMnB,EAAW,YAAO2E,GACxB3E,EAAYqF,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEnE,GAAKqE,cAAcD,EAAEpE,MAClDyD,EAAc5E,WClBE8F,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,KAAK,SAAA2D,GACjCA,EAAaC,iB","file":"static/js/main.6730fb0e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Search = ({ searchText, setSearchText }) => {\n  return (\n    <div className=\"container search\">\n      <div id=\"form\">\n        <form id=\"search-form\" className=\"col\">\n          <input\n            type=\"text\"\n            placeholder=\"search\"\n            //We are retrieving what is typed to set it later as the filter of our search\n            value={searchText}\n            onChange={e => setSearchText(e.target.value)}\n          />\n          <button type=\"button\" className=\"btn-dark search\" id=\"search\">\n            <i className=\"fa fa-search\" />\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useState, useEffect } from \"react\";\n\nconst Table = ({\n  contactList,\n  searchText,\n  deleteContact,\n  addFromTable,\n  sortBy,\n  startEditingContact\n}) => {\n  const [filteredContacts, setFilteredContacts] = useState([]);\n\n  useEffect(() => {\n    const searchTextLowerCased = searchText.toLowerCase();\n\n    //Set-up filter and pass contacts through it\n    const contacts = contactList.filter(contact => {\n      const name = `${contact.first_name} `.toLowerCase();\n      return name.indexOf(searchTextLowerCased) >= 0;\n    });\n\n    setFilteredContacts(contacts);\n  }, [contactList, searchText]);\n\n  return (\n    <div className=\"bd-border table-light\">\n      <table className=\"table\">\n        <thead className=\"bg-light\">\n          <tr>\n            <th scope=\"col\">\n              <button onClick={() => sortBy(\"first_name\")}>Name</button>\n            </th>\n            <th scope=\"col\">\n              <button onClick={() => sortBy(\"last_name\")}>Last Name</button>\n            </th>\n            <th scope=\"col\">\n              <button onClick={() => sortBy(\"email\")}>Email</button>\n            </th>\n            <th scope=\"col\">Delete</th>\n            <th scope=\"col\">To My List</th>\n            <th scope=\"col\">Edit</th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredContacts.map(contact => (\n            <tr key={contact.id}>\n              <td>{contact.first_name}</td>\n              <td>{contact.last_name}</td>\n              <td>{contact.email}</td>\n              <td>\n                <i\n                  className=\"fa fa-trash-o ml-3\"\n                  aria-hidden=\"true\"\n                  onClick={() => deleteContact(contact.id)}\n                />\n              </td>\n              <td>\n                {!contact.isInUserList && (\n                  <i\n                    className=\"fa fa-plus-square ml-3\"\n                    aria-hidden=\"true\"\n                    onClick={() => addFromTable(contact.id)}\n                  />\n                )}\n\n                {contact.isInUserList && \"added!\"}\n              </td>\n\n              <td>\n                <i\n                  className=\"fa fa-pencil-square yellow\"\n                  aria-hidden=\"true\"\n                  onClick={() => startEditingContact(contact.id)}\n                />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\nimport { addContactToServer, editContactInServer } from \"./requests\";\n\nexport default class ContactForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: props.contact ? props.contact.id : null,\n      contact: {\n        first_name: props.contact ? props.contact.first_name : \"\",\n        last_name: props.contact ? props.contact.last_name : \"\",\n        email: props.contact ? props.contact.email : \"\",\n        gender: props.contact ? props.contact.gender : \"\"\n      },\n\n      isValid: {\n        first_name: props.contact ? true : false,\n        last_name: props.contact ? true : false,\n        email: props.contact ? true : false,\n        gender: props.contact ? true : false\n      }\n    };\n  }\n\n  isNewContact = () => {\n    //console.log(\"isNewContact ?\", this.state.id == null);\n    return this.state.id == null;\n  };\n\n  handleChange = (event, isValid) => {\n    this.setState({\n      contact: {\n        ...this.state.contact,\n        [event.target.name]: event.target.value\n      },\n      isValid: { ...this.state.isValid, [event.target.name]: isValid }\n    });\n  };\n\n  // @TODO: saveContact on submit\n  handleSubmit = event => {\n    event.preventDefault();\n    if (this.isNewContact()) {\n      addContactToServer(\n        this.state.contact,\n        responseObject => {\n          this.props.addNewContact(responseObject);\n        },\n        () => {\n          alert(\"Something went wrong!\");\n        }\n      );\n    } else {\n      console.log(this.state.id, \"id of contact being edited\");\n      editContactInServer(\n        //updates the state of the contact\n        this.state.contact,\n        () => {\n          this.props.updateContact({\n            id: this.state.id,\n            ...this.state.contact\n          });\n        },\n\n        () => {\n          alert(\"Something went wrong!\");\n        }\n      );\n    }\n    //event.currentTarget.reset();\n  };\n\n  render() {\n    const contact = this.state.contact;\n\n    // disable the button until input is validated\n    const isDisabled = Object.values(this.state.isValid).includes(false);\n\n    return (\n      <div>\n        <form onSubmit={e => this.handleSubmit(e)} className=\"contact-form\">\n          <div className=\"form-group p-2\">\n            <h3 className=\"text-center\">\n              {this.isNewContact() ? \"Add New\" : \"Edit Existing\"} Contact\n            </h3>\n            <label htmlFor=\"first_name\" className=\"text-left\">\n              Contact Name\n            </label>\n            <input\n              onChange={e =>\n                this.handleChange(\n                  e,\n                  e.target.value.length >= 3 && e.target.value.length <= 20\n                )\n              }\n              type=\"text\"\n              name=\"first_name\"\n              value={contact.first_name}\n              className=\"form-control mb-2\"\n              id=\"first_name\"\n              placeholder=\"First name\"\n              required\n              autoComplete=\"true\"\n            />\n            <label htmlFor=\"last_name\" className=\"text-left\">\n              Last Name\n            </label>\n            <input\n              onChange={e =>\n                this.handleChange(\n                  e,\n                  e.target.value.length >= 3 && e.target.value.length <= 20\n                )\n              }\n              type=\"text\"\n              name=\"last_name\"\n              value={contact.last_name}\n              className=\"form-control mb-2\"\n              id=\"last_name\"\n              placeholder=\"Last name\"\n              autoComplete=\"true\"\n            />\n            <label htmlFor=\"email\" className=\"text-left\">\n              Email\n            </label>\n            <input\n              onChange={e =>\n                this.handleChange(\n                  e,\n                  e.target.value.length >= 6 && e.target.value.includes(\"@\")\n                )\n              }\n              type=\"email\"\n              name=\"email\"\n              value={contact.email}\n              className=\"form-control mb-2\"\n              id=\"email\"\n              placeholder=\"Email\"\n              required\n            />\n\n            <label htmlFor=\"gender\" className=\"text-left\">\n              Gender\n            </label>\n            <select\n              className=\"form-control\"\n              id=\"gender\"\n              placeholder=\"Gender\"\n              name=\"gender\"\n              value={contact.gender}\n              required\n              onChange={e =>\n                //This makes them all male\n                this.handleChange(\n                  e,\n                  [\"Male\", \"Female\", \"Other\"].includes(e.target.value)\n                )\n              }\n            >\n              <option>Other</option>\n              <option>Male</option>\n              <option>Female</option>\n            </select>\n            <div className=\"mb-3\">\n              <button\n                className=\"btn btn-danger float-left\"\n                id=\"submit\"\n                type=\"submit\"\n                disabled={isDisabled}\n              >\n                Save Contact\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n","//Post method for adding contact\nexport function addContactToServer(contactObj, onSuccess, onError) {\n  fetch(\n    \"https://my-json-server.typicode.com/Klarala13/contact-list-server/data\",\n    {\n      contactObj,\n      method: \"POST\",\n      body: JSON.stringify(contactObj),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  )\n    .then((res) => res.json())\n    .then((res) => {\n      onSuccess(res);\n      console.log(\"Good job! u added ur contact!\", res);\n    })\n    .catch((error) => {\n      onError();\n      console.error(\"Ooohhh, u messed up! try again buddy\", error);\n    });\n}\n\n//method for editing existing contact\nexport function editContactInServer(contactObj, onSuccess, onError) {\n  fetch(\n    \"https://my-json-server.typicode.com/Klarala13/contact-list-server/data\",\n    {\n      contactObj,\n      method: \"POST\",\n      body: JSON.stringify(contactObj),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }\n  )\n    .then((res) => res.json())\n    .then((res) => {\n      onSuccess(contactObj);\n      console.log(\"Good job! u updated ur contact!\", contactObj);\n    })\n    .catch((error) => {\n      onError();\n      console.error(\"Ohhh, u messed up! could not update\", error);\n    });\n}\n","import React from \"react\";\n\nconst UserTable = ({ removeContactFromUserList, sortBy, contacts }) => {\n  return (\n    <div className=\"box\">\n      <div className=\"user-table table-light\">\n        <h3 className=\"text-center\">My Fav Contacts</h3>\n        <table className=\"user-table table\">\n          <thead className=\"bg-light\">\n            <tr>\n              <th scope=\"col\">\n                <button onClick={() => sortBy(\"first_name\", contacts)}>\n                  Name\n                </button>\n              </th>\n              <th scope=\"col\">\n                <button onClick={() => sortBy(\"last_name\", contacts)}>\n                  Last Name\n                </button>\n              </th>\n              <th scope=\"col\">\n                <button onClick={() => sortBy(\"email\", contacts)}>Email</button>\n              </th>\n              <th scope=\"col\">Remove</th>\n            </tr>\n          </thead>\n          <tbody>\n            {contacts.map(person => (\n              <tr key={person.id}>\n                <td>{person.first_name}</td>\n                <td>{person.last_name}</td>\n                <td>{person.email}</td>\n                <td>\n                  <i\n                    className=\"fa fa-trash-o ml-3\"\n                    aria-hidden=\"true\"\n                    onClick={() => removeContactFromUserList(person.id)}\n                  />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default UserTable;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"../../css/App.css\";\nimport \"../../css/main.css\";\nimport Search from \"../Search\";\nimport Table from \"../Table\";\nimport ContactForm from \"../Form/\";\nimport UserTable from \"../UserTable\";\n\nconst App = () => {\n  const [contacts, setContacts] = useState([]);\n  const [myContacts, setMyContacts] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n  // id of contact currently being edited, if any; otherwise null\n  const [idOfContactBeingEdited, setIdOfContactBeingEdited] = useState(null);\n\n  const deleteContact = (id) => {\n    const newContactList = contacts.filter((contact) => contact.id !== id);\n    setContacts(newContactList);\n  };\n\n  const sortBy = (key) => {\n    const contactList = [...contacts];\n    contactList.sort((a, b) => a[key].localeCompare(b[key]));\n    setContacts(contactList);\n  };\n\n  const sortByMyContacts = (key) => {\n    const contactList = [...myContacts];\n    contactList.sort((a, b) => a[key].localeCompare(b[key]));\n    setMyContacts(contactList);\n  };\n\n  const addFromTable = (id) => {\n    const contactIndex = contacts.findIndex((contact) => contact.id === id);\n    console.log(\"contactIndex\", contactIndex);\n    contacts[contactIndex].isInUserList = true;\n    setMyContacts([...myContacts, contacts[contactIndex]]);\n  };\n\n  const getContactById = (id) => {\n    return (contacts.filter((contact) => contact.id === id) || [])[0];\n  };\n\n  const updateContact = (newContactData) => {\n    const contactIndex = contacts.findIndex(\n      (contact) => contact.id === newContactData.id\n    );\n    console.log(\"new cont\", newContactData);\n    let updatedContacts = [...contacts];\n    updatedContacts[contactIndex] = {\n      ...updatedContacts[contactIndex],\n      ...newContactData,\n    };\n    setContacts(updatedContacts);\n    setIdOfContactBeingEdited(null);\n  };\n\n  const addNewContact = (newContactData) => {\n    const newContactList = [...contacts, newContactData];\n    setContacts(newContactList);\n    setIdOfContactBeingEdited(null);\n  };\n\n  const removeContactFromUserList = (id) => {\n    const contactIndex = myContacts.findIndex((contact) => contact.id === id);\n    myContacts.splice(contactIndex, 1);\n    setMyContacts([...myContacts]);\n  };\n\n  // Load the contacts list only once and update according to add or edit method\n  useEffect(() => {\n    axios\n      .get(\n        \"https://my-json-server.typicode.com/Klarala13/contact-list-server/data\"\n      )\n      .then((response) => {\n        response.data.forEach((contact) => (contact.isInUserList = false));\n        return response.data;\n      })\n      .then((data) => setContacts(data));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div>\n        <header className=\"App-header\">\n          <h1>Contact List</h1>\n        </header>\n\n        <Search searchText={searchText} setSearchText={setSearchText} />\n\n        <main>\n          <section className=\"col-7\">\n            <Table\n              contactList={contacts}\n              searchText={searchText}\n              deleteContact={deleteContact}\n              startEditingContact={setIdOfContactBeingEdited}\n              sortBy={sortBy}\n              addFromTable={addFromTable}\n            />\n          </section>\n\n          <aside>\n            {idOfContactBeingEdited && (\n              <ContactForm\n                contact={getContactById(idOfContactBeingEdited)}\n                updateContact={updateContact}\n              />\n            )}\n\n            {!idOfContactBeingEdited && (\n              <ContactForm addNewContact={addNewContact} />\n            )}\n\n            <UserTable\n              contacts={myContacts}\n              removeContactFromUserList={removeContactFromUserList}\n              sortBy={sortByMyContacts}\n            />\n          </aside>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}